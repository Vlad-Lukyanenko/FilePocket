@page "/pockets/{PocketId:guid}/notes/{Id:guid}"
@page "/pockets/{PocketId:guid}/folders/{FolderId:guid}/notes/{Id:guid}"
@using FilePocket.BlazorClient.Features
@using FilePocket.BlazorClient.Features.Notes
@using FilePocket.BlazorClient.Features.Notes.Models
@using FilePocket.BlazorClient.Features.Notes.Requests
@using FilePocket.BlazorClient.Features.Storage.Models
@using FilePocket.BlazorClient.Features.Storage.Requests
@using FilePocket.BlazorClient.Features.Trash
@using FilePocket.BlazorClient.Features.Users.Requests
@using FilePocket.BlazorClient.Helpers
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<style>
    .note-view {
        max-height: 600px;
        overflow: auto;
    }

    .note-attributes {
        font-size: 0.875rem;
    }

        .note-attributes > div {
            padding: 0 0.5rem;
        }

    .title-text-container {
        width: 100%;
        height: 38px;
        border: 1px solid #eeeeee;
        border-radius: 0.375rem;
        padding: 6px 12px;
    }

    .controls-container button {
        border: 0;
        background-color: transparent;
        color: #7F7F7F;
        padding: 4px;
        width: 38px;
        height: 38px;
        line-height: 30px;
    }

        .controls-container button:hover {
            color: black;
        }
</style>

<div class="container-fluid" style="min-height: 600px;">

    <!-- Top SubMenu -->
    <TopSubMenu Title="Note Viewer" ShowBackButton="true" />

    @if (_note != null)
    {
        <div class="row note-header align-items-center mb-3">
            <!-- Title -->
            <div class="col-md-5">
                <div class="note-header__title text-truncate" title="@_note?.Title">
                    @Tools.TruncateString(_note?.Title!, 36)
                </div>
            </div>

            <!-- Timestamps -->
            <div class="col-md-4 d-flex justify-content-evenly note-header__timestamps text-muted small">
                <div>
                    <strong>Created:</strong> @_note!.CreatedAt.ToString("g")
                </div>
                <div>
                    <strong>Updated:</strong> @GetUpdatedDateValue(_note.UpdatedAt)
                </div>
            </div>

            <!-- Controls -->
            <div class="col-md-3 d-flex justify-content-end gap-2 note-header__controls">
                @if (!_removalProcessStarted)
                {
                    <button class="btn btn-outline-primary btn-sm" title="Edit"
                            @onclick="NavigateToEdit">
                        <i class="bi bi-pencil-square"></i> Edit
                    </button>
                    <button class="btn btn-outline-danger btn-sm" title="Delete"
                            @onclick="() => _removalProcessStarted = true">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                }
                else
                {
                    <button class="btn btn-outline-danger btn-sm" title="Confirm"
                            @onclick="MoveToTrashClick">
                        <i class="bi bi-check-square"></i> Confirm
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" title="Cancel"
                            @onclick="() => _removalProcessStarted = false">
                        <i class="bi bi-x-square"></i> Cancel
                    </button>
                }
            </div>
        </div>

        <div class="card py-3">
            <div class="card-body note-view" @ondblclick=@NavigateToEdit>
                @((MarkupString)_note.Content)
            </div>
        </div>
    }

</div>


@code {
    [Parameter]
    public Guid Id { get; set; }

    [Parameter]
    public Guid PocketId { get; set; }

    [Parameter]
    public Guid? FolderId { get; set; }

    [Inject]
    private INoteRequests NoteRequests { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider AuthStateProvider { get; set; } = default!;

    [Inject]
    private IUserRequests UserRequests { get; set; } = default!;

    [Inject]
    private ITrashRequests TrashRequests { get; set; } = default!;

    [Inject]
    private IStorageRequests StorageRequests { get; set; } = default!;

    [Inject]
    private StateContainer<StorageConsumptionModel> StorageStateContainer { get; set; } = default!;

    public string _goBackUrl { get; set; }
    private NoteModel? _note;
    private Guid _userId = Guid.Empty;
    private const string DateTimePlaceholder = "--.--.---- --:--:--";
    private bool _removalProcessStarted = false;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name!;

        var user = await UserRequests.GetByUserNameAsync(userName);
        if (user == null)
        {
            return;
        }

        _userId = user.Id!.Value;

        if (Id != Guid.Empty)
        {
            _note = await NoteRequests.GetByIdAsync(Id);
        }

        InitGoBackUrl();
    }

    private void InitGoBackUrl()
    {
        _goBackUrl = FolderId is null
               ? $"/pockets/{PocketId}/notes"
               : $"/pockets/{PocketId}/folders/{FolderId}/notes";
    }

    private void NavigateToEdit()
    {
        var url = Navigation.Uri + "/edit";

        Navigation.NavigateTo(url);
    }

    private static string GetUpdatedDateValue(DateTime? updatedAt)
    {
        return (updatedAt == null ? DateTimePlaceholder : updatedAt.ToString())!;
    }

    private async void MoveToTrashClick()
    {

        var result = await NoteRequests.DeleteAsync(Id);

        if (result)
        {
            var storageConsumption = await StorageRequests.GetStorageConsumption();
            StorageStateContainer.SetValue(storageConsumption!);
            Navigation.NavigateTo(_goBackUrl);
        }
    }
}

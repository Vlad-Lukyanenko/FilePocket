@using FilePocket.BlazorClient.Features.Files.Models
@using FilePocket.BlazorClient.Features.Notes.Models
@using FilePocket.BlazorClient.Features.Notes.Requests
@using FilePocket.BlazorClient.Helpers
@using FilePocket.BlazorClient.Services.Files.Models
@using System.Collections.Concurrent
@using System.Collections.ObjectModel

<div class="row row-cols-1 row-cols-md-3 row-cols-lg-4 g-4 text-center justify-content-center">
    @if (Notes != null && Notes.Any())
    {
        foreach (var note in Notes)
        {
            <div class="card h-100 shadow-sm me-2 pt-2" style="width: 8em;">
                <a class="file-link text-decoration-none" title="@note.Title" href="@GetNoteUrl(note)">
                    <img src="./assets/img/note.png" width="56" class="d-block mx-auto mb-3" alt="File icon" />
                    <h6 class="card-title" style="font-size: 0.8em">@Tools.TruncateString(note.Title!)</h6>
                </a>
            </div>
        }
    }
</div>


@code {
    [Parameter]
    public ObservableCollection<NoteModel>? Notes { get; set; }

    [Parameter]
    public INoteRequests NoteRequests { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    private bool _dialogOpen;
    private Guid? _noteToDeleteId;

    private string GetNoteUrl(NoteModel note)
    {
        return note.FolderId == null
        ? $"pockets/{note.PocketId}/notes/{note.Id}"
        : $"pockets/{note.PocketId}/folders/{note.FolderId}/notes/{note.Id}";
    }

    private void OpenDialog(Guid id)
    {
        _dialogOpen = true;
        _noteToDeleteId = id;
    }

    private void CloseDialog()
    {
        _noteToDeleteId = null;
        _dialogOpen = false;
    }

    private void NavigateToEdit(NoteModel note)
    {
        var url = GetNoteUrl(note) + "/edit";

        Navigation.NavigateTo(url);
    }

    private async Task DeleteNote()
    {
        if (_noteToDeleteId != null)
        {
            var noteToDelete = Notes!.First(n => n.Id == _noteToDeleteId);
            var result = await NoteRequests.DeleteAsync(_noteToDeleteId.Value);

            if (result)
            {
                Notes?.Remove(noteToDelete);

                CloseDialog();
            }
        }
    }
}

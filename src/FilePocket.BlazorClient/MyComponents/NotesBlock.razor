@using FilePocket.BlazorClient.Features.Files.Models
@using FilePocket.BlazorClient.Features.Notes.Models
@using FilePocket.BlazorClient.Features.Notes.Requests
@using FilePocket.BlazorClient.Helpers
@using FilePocket.BlazorClient.Services.Files.Models
@using System.Collections.Concurrent
@using System.Collections.ObjectModel

<style>
    .title {
    font-size: 0.875rem;
    }

    .title a {
    line-height: 24px;
    }

    .controls-container button {
    border: 0;
    background-color: transparent;
    color: #7F7F7F;
    padding: 4px;
    width: 24px;
    height: 24px;
    line-height: 16px;
    }

    .controls-container button:hover {
    color: black;
    }

    .dialog-container {
    position: fixed;
    display: flex;
    height: 100vh;
    width: 100vw;
    top: 0;
    left: 0;
    justify-content: center;
    align-items: center;
    align-content: stretch;
    background-color: rgba(50, 50, 50, 0.25);
    }

    .dialog {
    background-color: white;
    border-color: silver;
    }

    .noteStyle{
    background-image: url(../assets/img/note.png);
    background-position: center;
    background-size: cover;
    aspect-ratio: 9 / 9.5;
    }
</style>


<div class="row row-cols-1 row-cols-md-3 row-cols-lg-4 g-4 text-center justify-content-center">
    @if (Notes != null)
    {
        @foreach (var note in Notes)
        {
            <div class="py-4 px-3 noteStyle d-flex flex-column">

                    <div class="col px-4 py-4 text-start title">
                        <a class="file-link text-decoration-none " title="@note.Title" href="@GetNoteUrl(note)">
                            @Tools.TruncateString(note.Title!, 24)
                        </a>
                    </div>
                    <div class="col-3 px-3 controls-container d-flex w-100 justify-content-end">

                        <button type="button" class="btn-outline-primary" aria-label="Edit note" data-bs-original-title="Edit note" @onclick="@(()=>NavigateToEdit(note))">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button type="button" class="btn-outline-primary" aria-label="Delete note" data-bs-original-title="Delete note" @onclick="@(()=>OpenDialog(note.Id))">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
            </div>
        }


        <!-- Delite Confirm Dilog -->
        @if (_dialogOpen)
        {
            <div class="dialog-container m-0 p-0">
                <div class="card dialog">
                    <div class="card-body">
                        <div class="text-end mb-3">
                            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseDialog"></button>
                        </div>
                        <div class="mb-4 px-3" style="font-size: 0.875rem;">
                            Are you really going to delete the note?
                        </div>
                        <div class="mb-2">
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="CloseDialog">Cancel</button>
                            <button type="button" class="btn btn-outline-danger btn-sm" @onclick="@(async()=>await DeleteNote())">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>


@code {
    [Parameter]
    public ObservableCollection<NoteModel>? Notes { get; set; }

    [Parameter]
    public INoteRequests NoteRequests { get; set; } = default!;

    [Inject]
    private NavigationManager Navigation { get; set; } = default!;

    private bool _dialogOpen;
    private Guid? _noteToDeleteId;

    private string GetNoteUrl(NoteModel note)
    {
        return note.FolderId == null
        ? $"pockets/{note.PocketId}/notes/{note.Id}"
        : $"pockets/{note.PocketId}/folders/{note.FolderId}/notes/{note.Id}";
    }

    private void OpenDialog(Guid id)
    {
        _dialogOpen = true;
        _noteToDeleteId = id;
    }

    private void CloseDialog()
    {
        _noteToDeleteId = null;
        _dialogOpen = false;
    }

    private void NavigateToEdit(NoteModel note)
    {
        var url = GetNoteUrl(note) + "/edit";

        Navigation.NavigateTo(url);
    }

    private async Task DeleteNote()
    {
        if (_noteToDeleteId != null)
        {
            var noteToDelete = Notes!.First(n => n.Id == _noteToDeleteId);
            var result = await NoteRequests.DeleteAsync(_noteToDeleteId.Value);

            if (result)
            {
                Notes?.Remove(noteToDelete);

                CloseDialog();
            }
        }
    }
}
